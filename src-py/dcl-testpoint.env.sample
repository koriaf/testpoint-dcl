DCL_DEBUG=False
DCL_SECRET_KEY=some secret value

# replace it to something real
# it's OIDC configuration for API JWT token check, optional
DCL_OIDC_AUDIENCES=999999
DCL_OIDC_ENDPOINT=http://127.0.0.1:7500
# format: name, iss, endpoint, aud
DCL_DRFOIDC_ENDPOINTS_CONF=simguard;http://127.0.0.1:7500;http://127.0.0.1:7500;999999

# sqlite
DCL_DB_ENGINE=django.db.backends.sqlite3
DCL_DB_NAME=dcl.sqlite

# local docker-compose postgres container
DCL_DB_ENGINE=django.db.backends.postgresql_psycopg2
DCL_DB_NAME=postgres
DCL_DB_HOST=db
DCL_DB_USERNAME=postgres
DCL_DB_PASSWORD=

# remote database
DCL_DB_ENGINE=django.db.backends.postgresql_psycopg2
DCL_DB_NAME=postgres
DCL_DB_HOST=lalalaa.rds.amazon.com
DCL_DB_USERNAME=postgres
DCL_DB_PASSWORD=XXXXXXXXXXXXX

# if you want to have exceptions in Sentry (recommended)
# DCL_RAVEN_DSN=https://first:second@sentry.host.name/projectid

# naptr user, used to call the Route53 api. Should be IAM user with just Route54 access
# (but you can use your global iam credentials for debug - just don't leak them)
DCL_ROUTE_53_IAM_ACCESS_KEY=XXXXXXXXXXXX
DCL_ROUTE_53_IAM_ACCESS_SECRET=YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY

# the values you shall get from your OIDC provider (try our idp.testpoint.io)
# used for GUI OIDC auth ('login with XXX')
DCL_SIMGUARD_HOSTNAME=https://idp.testpoint.io
DCL_SIMGUARD_CLIENT_ID=999999
DCL_SIMGUARD_CLIENT_SECRET=XXXXXXXXXXXXXXXXXXXXXXXXX

DCL_ROUTE53_ZONE_ID=XXXXXXXXXXXXXX
